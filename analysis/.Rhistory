write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
### For emulating ggplot colors ###
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
mypal<-gg_color_hue(6)
#color palette for standard plots - colorblind friendly
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442")
l = length(seq(-7.9, 8, 0.1))
pal = colorRampPalette(c('#2166AC', '#F7F7F7', '#B2182B'))(l)
#Allows visualization of a color Palette
#require(scales)
#show_col(cbPalette)
# Define a color and shape scheme for the whole manuscript
#mycols<-data.frame(type=c("AON","Early","Late","WT"), cols=cbPalette)
#mycols$type <- factor(mycols$type, ordered=TRUE)
all.data.A17$name<-factor(all.data.A17$name,levels = rev(levels(all.data.A17$name)))
#Boxplot depicting nodulation per plant
nod_cnt <-ggplot(all.data.A17,aes(x=name, y=nodules_perplant,fill=type)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter() +
coord_flip() +
scale_color_manual(values=cbPalette)  +
labs(x="Plant Host",y="Nodules per plant") +
theme_classic() + theme(legend.position="top", text = element_text(size=18))
nod_cnt
#Boxplot depicting average nodule size per plant
nod_size<-ggplot(all.data.A17,aes(x=reorder(name,type), y=Nodulesizeperplant,fill=type)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter() +
coord_flip() +
scale_color_manual(values=cbPalette)  +
labs(x="Plant Host",y="Average NoduleSize per plant") +
theme_classic() + theme(legend.position="top", text = element_text(size=18))
nod_size
#Boxplot depicting total nodulated area per plant
tot_nod_area<-ggplot(all.data.A17,aes(x=reorder(name,type), y=total_nodulated_area_perplant,fill=type)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter() +
coord_flip() +
scale_color_manual(values=cbPalette)  +
labs(x="Plant Host",y="Total Nodulated Area per plant") +
theme_classic() + theme(legend.position="top", text = element_text(size=18))
tot_nod_area
#Boxplot depicting CFU per plant
cfu_per_plant<-ggplot(all.data.A17,aes(x=reorder(name,type), y=log_CFUperplant,fill=type)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter() +
coord_flip() +
scale_color_manual(values=cbPalette)  +
labs(x="Plant Host",y="log(CFU per plant)") +
theme_classic() + theme(legend.position="top", text = element_text(size=18))
cfu_per_plant
#Boxplot depicting CFU per nodule
cfu_per_nodule<-ggplot(all.data.A17,aes(x=reorder(name,type), y=log_CFUpernodule,fill=type)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter() +
coord_flip() +
scale_color_manual(values=cbPalette)  +
labs(x="Plant Host",y="log(CFU per nodule") +
theme_classic() + theme(legend.position="top", text = element_text(size=18))
cfu_per_nodule
#Boxplot depicting total biomass
total_biomass<-ggplot(all.data.A17,aes(x=reorder(name,type), y=total_biomass,fill=type)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter() +
coord_flip() +
scale_color_manual(values=cbPalette)  +
labs(x="Plant Host",y="Total Biomass(mg)") +
theme_classic() + theme(legend.position="top", text = element_text(size=18))
total_biomass
#Boxplot depicting Nodule_weight_perplant
Nodule_weight_perplant<-ggplot(all.data.A17,aes(x=reorder(name,type), y=Nodule_weight_perplant,fill=type)) + geom_boxplot(outlier.shape=NA)+geom_jitter()+coord_flip()+scale_color_manual(values=cbPalette)+labs(x="Plant Host",y="Nodule weight perplant")+theme_classic()+theme(legend.position="top",text = element_text(size=18))
Nodule_weight_perplant
#Boxplot depicting ratio of above and below ground biomass
biomass_ratio<-ggplot(all.data.A17,aes(x=reorder(name,type), y=ratio,fill=type)) +
geom_boxplot(outlier.shape=NA) +
geom_jitter() +
coord_flip() +
scale_color_manual(values=cbPalette)  +
labs(x="Plant Host",y="Belowground:Aboveground") +
theme_classic() + theme(legend.position="top", text = element_text(size=18))
biomass_ratio
extract.anova<- function(trait) {
#Dropping rows with NA
all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
ANOVA.Trait.Summary<-rbind(extract.anova("nodules_perplant"),
extract.anova("average_size"),
extract.anova("total_area"),extract.anova("total_nodulated_area_perplant"),extract.anova("log_CFUperplant"),extract.anova("log_CFUpernodule"),extract.anova("total_biomass"),extract_anova("ratio"),extract_anova("Nodule_weight_perplant"))
extract.anova<- function(trait) {
#Dropping rows with NA
all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
ANOVA.Trait.Summary<-rbind(extract.anova("nodules_perplant"),
extract.anova("average_size"),
extract.anova("total_area"),extract.anova("total_nodulated_area_perplant"),extract.anova("total_biomass"),extract_anova("ratio"),extract_anova("Nodule_weight_perplant"))
ANOVA.Trait.Summary<-rbind(extract.anova("nodules_perplant"),
extract.anova("average_size"),
extract.anova("total_area"),extract.anova("total_nodulated_area_perplant"),extract.anova("total_biomass"),extract_anova("Nodule_weight_perplant"))
ANOVA.Trait.Summary<-rbind(extract.anova("nodules_perplant"),
extract.anova("average_size"),
extract.anova("total_area"),extract.anova("total_nodulated_area_perplant"),extract.anova("total_biomass"),extract.anova("Nodule_weight_perplant"))
write.table (ANOVA.Trait.Summary,file="../tables/ANOVA-Trait-Summary.txt",sep = "\t",row.names = FALSE)
ANOVA.Trait.Summary<-rbind(extract.anova("nodules_perplant"),
extract.anova("average_size"),
extract.anova("total_area"),extract.anova("total_nodulated_area_perplant"),extract.anova("total_biomass"),extract.anova("ratio"),extract.anova("Nodule_weight_perplant"))
write.table (ANOVA.Trait.Summary,file="../tables/ANOVA-Trait-Summary.txt",sep = "\t",row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the whole data? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
extract.anova<- function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
ANOVA.Trait.Summary<-rbind(extract.anova("nodules_perplant"),
extract.anova("average_size"),
extract.anova("total_area"),extract.anova("total_nodulated_area_perplant"),extract.anova("total_biomass"),extract.anova("ratio"),extract.anova("Nodule_weight_perplant"),extract.anova("log_CFUpernodule"),extract.anova("log_CFUperplant"))
write.table (ANOVA.Trait.Summary,file="../tables/ANOVA-Trait-Summary.txt",sep = "\t",row.names = FALSE)
extract.anova("nodules_perplant")
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
# Run a model with name and replicate as predictors
NodSize.G<-lm(Nodulesizeperplant ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors
NodSize.T<-lm(Nodulesizeperplant ~type+rep,data=all.data.A17)
#Examine the summaries
summary(NodSize.G)
summary(NodSize.T)
#Examine the Analysis of Variance tables
p<-anova(NodNum.G)
extract.summary<-function(trait) {#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
trait.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
trait.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Intercept=c(trait.G$"Intercept",trait.T$"Intercept"),Estimate=c(trait.G$"Estimate",trait.T$"Estimate"),Pval=c(trait.G$"Pr(>|t|)",trait.T$"Pr(>|t|)"))
return(myresults)
}
TRAIT.summary<-rbind(extract.summary("nodules_perplant"),extract.summary("average_size"),extract.summary("average_size"),extract.summary("total_area"),extract.summary("total_nodulated_area_perplant"),extract.summary("total_biomass"),extract.summary("ratio"),extract.summary("ratio"),extract.summary("log_CFUpernodule"),extract.summary("log_CFUperplant"))
extract.summary<-function(trait) {#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
trait.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
trait.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Type","Replicate"),Intercept=c(trait.G$"Intercept",trait.T$"Intercept"),Estimate=c(trait.G$"Estimate",trait.T$"Estimate"),Pval=c(trait.G$"Pr(>|t|)",trait.T$"Pr(>|t|)"))
return(myresults)
}
TRAIT.summary<-rbind(extract.summary("nodules_perplant"),extract.summary("average_size"),extract.summary("average_size"),extract.summary("total_area"),extract.summary("total_nodulated_area_perplant"),extract.summary("total_biomass"),extract.summary("ratio"),extract.summary("ratio"),extract.summary("log_CFUpernodule"),extract.summary("log_CFUperplant"))
extract.summary<-function(trait) {#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
trait.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
trait.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Type"),Intercept=c(trait.G$"Intercept",trait.T$"Intercept"),Estimate=c(trait.G$"Estimate",trait.T$"Estimate"),Pval=c(trait.G$"Pr(>|t|)",trait.T$"Pr(>|t|)"))
return(myresults)
}
TRAIT.summary<-rbind(extract.summary("nodules_perplant"),extract.summary("average_size"),extract.summary("average_size"),extract.summary("total_area"),extract.summary("total_nodulated_area_perplant"),extract.summary("total_biomass"),extract.summary("ratio"),extract.summary("ratio"),extract.summary("log_CFUpernodule"),extract.summary("log_CFUperplant"))
extract.summary<-function(trait) {#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
trait.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
trait.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Type"),Estimate=c(trait.G$"Estimate",trait.T$"Estimate"),Pval=c(trait.G$"Pr(>|t|)",trait.T$"Pr(>|t|)"))
return(myresults)
}
TRAIT.summary<-rbind(extract.summary("nodules_perplant"),extract.summary("average_size"),extract.summary("average_size"),extract.summary("total_area"),extract.summary("total_nodulated_area_perplant"),extract.summary("total_biomass"),extract.summary("ratio"),extract.summary("ratio"),extract.summary("log_CFUpernodule"),extract.summary("log_CFUperplant"))
extract.summary<-function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
trait.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
trait.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Type"),Intercept=c(trait.G$"Intercept",trait.T$"Intercept"),Estimate=c(trait.G$"Estimate",trait.T$"Estimate"),Pval=c(trait.G$"Pr(>|t|)",trait.T$"Pr(>|t|)"))
return(myresults)
}
TRAIT.summary<-rbind(extract.summary("nodules_perplant"),extract.summary("average_size"),extract.summary("average_size"),extract.summary("total_area"),extract.summary("total_nodulated_area_perplant"),extract.summary("total_biomass"),extract.summary("ratio"),extract.summary("ratio"),extract.summary("log_CFUpernodule"),extract.summary("log_CFUperplant"))
TRAIT.summary<-cbind(extract.summary("nodules_perplant"),extract.summary("average_size"),extract.summary("average_size"),extract.summary("total_area"),extract.summary("total_nodulated_area_perplant"),extract.summary("total_biomass"),extract.summary("ratio"),extract.summary("ratio"),extract.summary("log_CFUpernodule"),extract.summary("log_CFUperplant"))
extract.summary<-function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
trait.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
trait.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype"),Intercept=c(trait.G$"Intercept"),Estimate=c(trait.G$"Estimate"),Pval=c(trait.G$"Pr(>|t|)"))
return(myresults)
}
TRAIT.summary<-rbind(extract.summary("nodules_perplant"),extract.summary("average_size"),extract.summary("average_size"),extract.summary("total_area"),extract.summary("total_nodulated_area_perplant"),extract.summary("total_biomass"),extract.summary("ratio"),extract.summary("ratio"),extract.summary("log_CFUpernodule"),extract.summary("log_CFUperplant"))
ratio.T
extract.summary(RATIO)
extract.summary(ratio)
extract.summary(nodules_perplant)
extract.anova(ratio)
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
extract.anova<- function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
extract.anova(ratio)
extract.anova("ratio")
extract.summary("ratio")
