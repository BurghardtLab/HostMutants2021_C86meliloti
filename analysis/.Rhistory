#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
View(all.data.A17)
trait= "nodules_perplant"
my.data<-my.data[!is.na(my.data[,trait]),]
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
coef.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
coef.G
coef.T<-lm(my.data[,trait] ~ type + rep, data = my.data)
coef.T
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
coefs.G <- summary(model.G)$coefficients
coefs.G
row.names(coefs.G)
coefs.G<-as.data.frame(coefs.G)
coefs.G
as.data.frame(Predictor=row.names(summary(model.G)$coefficients),summary(model.G)$coefficients)
coefs.G <- as.data.frame(summary(model.G)$coefficients)
data.frame (Predictor=row.names(coefs.G), coefs.G)
data.frame (Predictor=row.names(coefs.G), coefs.G,row.names = FALSE)
coefs.G<- data.frame (Predictor=row.names(coefs.G), coefs.G)
col.names(coefs.G)
colnames(coefs.G)
colnames(coefs.G) <-c("Predictor","Coef", "St.error","t.value","P.value")
as.data.frame(summary(model.G)$coefficients,col.names=c("Coef", "St.error","t.value","P.value"))
as.data.frame(summary(model.G)$coefficients, col.names=c("Coef", "St.error","t.value","P.value"))
colnames(coefs.G) <-c("Predictor","Coef", "St.error","t.value","P.value")
coefs.G
coefs.G$Predictor!=c("(Intercept)")
coefs.G$Predictor!=c("(Intercept)","repB", "repC","repD","repE")
coefs.G$Predictor!=c("(Intercept)","repB", "repC","repD","repE")
coefs.G$Predictor %in% c("(Intercept)","repB", "repC","repD","repE")
coefs.G$Predictor !%in% c("(Intercept)","repB", "repC","repD","repE")
!coefs.G$Predictor %in% c("(Intercept)","repB", "repC","repD","repE")
coefs[!coefs.G$Predictor %in% c("(Intercept)","repB", "repC","repD","repE"),]
coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB", "repC","repD","repE"),]
coefs <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB", "repC","repD","repE"),]
trait= "total_biomass"
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
# Extract the coefficients and add column names
coefs.G <- as.data.frame(summary(model.G)$coefficients)
coefs.G<- data.frame (Predictor=row.names(coefs.G), coefs.G)
colnames(coefs.G) <-c("Predictor","Coef", "St.error","t.value","P.value")
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB", "repC","repD","repE"),]
coefs.G
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB", "repC","repD","repE","repF"),]
Classification<- function(Classification){ if (coefs.G$'Estimate' > 0 & coefs.G$'Pr(>|t|)'< 0.1) { "Increase"}
else if (coefs.G$'Estimate' < 0 & coefs.G$'Pr(>|t|)'< 0.1) {"Decrease"}
else if (coefs.G$'Estimate' >= 0 & coefs.G$'Pr(>|t|)'>0.1) {"Unchanged"}
)
coefs.G$class<-"none"
Classification<- function(Classification)
{ if (coefs.G$'Estimate' > 0 & coefs.G$'Pr(>|t|)'< 0.1) coef.G$ class<-"Increase"
else if (coefs.G$'Estimate' < 0 & coefs.G$'Pr(>|t|)'< 0.1) "Decrease"
else if (coefs.G$'Estimate' >= 0 & coefs.G$'Pr(>|t|)'>0.1) "Unchanged"
return(myresults)
}
coefs.G$class<-"none"
coefs.G
Classify.coefs<- function(coefs.G)
{ if (coefs.G$'Estimate' > 0 & coefs.G$'Pr(>|t|)'< 0.1) coef.G$class<-"Increase"
if (coefs.G$'Estimate' < 0 & coefs.G$'Pr(>|t|)'< 0.1) coef.G$class<-"Decrease"}
Classify.coefs()
Classify.coefs<- function(x=coefs.G)
{ if (x$'Estimate' > 0 & x$'Pr(>|t|)'< 0.1) x$class<-"Increase"
if (x$'Estimate' < 0 & x$'Pr(>|t|)'< 0.1) x$class<-"Decrease"}
Classify.coefs()
x=coefs.G
if (x$'Estimate' > 0 & x$'Pr(>|t|)'< 0.1)
x$class<-"Increase"
coefs.G
if (coefs.G$'Estimate' > 0 & coefs.G$'Pr(>|t|)'< 0.1) {coef.G$class<-"Increase"}
if (coefs.G$'Coef' > 0 & coefs.G$'P.value'< 0.1) {coef.G$class<-"Increase"}
coefs.G
if (coefs.G$Coef > 0 & coefs.G$P.value< 0.1)
{coef.G$class<-"Increase"}
coef.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.1),]
coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.1),]
coefs.G$Coef
coefs.G$P.value< 0.05
(coefs.G$Coef > 0
)
coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< 0.05),]
coefs.G$class<-"none"
coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.05),]$class<-"Increase"
coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< 0.05),]$class<-"Decrease"
coefs.G
extract.coef.genotype<-function(trait) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
# Step 3 Extract save coeffecient dataframe and add column names
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G<- data.frame (Predictor=row.names(coefs.G), coefs.G) # add the row names as column
colnames(coefs.G) <-c("Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
coefs.G$class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.05),]$class<-"Up"
coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< 0.05),]$class<-"Down"
return(coefs.G)
}
extract.coef.genotype(Nodule_weight_perplant)
trait
extract.coef.genotype(trait = trait)
extract.coef.genotype<-function(trait) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
# Step 3 Extract save coeffecient dataframe and add column names
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G<- data.frame (Predictor=row.names(coefs.G), coefs.G) # add the row names as column
colnames(coefs.G) <-c("Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
coefs.G$class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.05),]$class<-"Up")
try(coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< 0.05),]$class<-"Down")
return(coefs.G)
}
extract.coef.genotype(trait = trait)
extract.coef.genotype(trait = ratio)
extract.coef.genotype(trait = Nodule_weight_perplant)
extract.coef.genotype(trait = nodules_perplant)
View(Traits_MedicagoMutants)
extract.coef.genotype(trait = "nodules_perplant")
Geno.Coef.Summary<-rbind(
extract.coef.genotype("nodules_perplant"),extract.coef.genotype("average_size"),extract.coef.genotype("total_area"),extract.coef.genotype("total_nodulated_area_perplant"),extract.coef.genotype("total_biomass"),extract.coef.genotype("ratio"),extract.coef.genotype("Nodule_weight_perplant"),extract.coef.genotype("log_CFUpernodule"),extract.coef.genotype("log_CFUperplant"))
}
Geno.Coef.Summary
trait= "nodules_perplant"
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G
coefs.G<- data.frame (Predictor=row.names(coefs.G), coefs.G)
coefs.G
colnames(coefs.G)
colnames(coefs.G) <-c("Predictor","Coef", "St.error","t.value","P.value")
coefs.G
coefs.G$Predictor
coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF")
!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF")
coefs.G
dim(coefs.G)
coefs[19,]
coefs.G[19,]
coefs.G[,1]
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
coefs.G
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G<- data.frame (Trait=paste(trait),Predictor=row.names(coefs.G), coefs.G) # add the row names as column
coefs.G
colnames(coefs.G) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
coefs.G
coefs.G$Class<-"none" #Set up dummy column to hold classifications
coefs.G
(coefs.G$Coef > 0 & coefs.G$P.value< 0.05)
(coefs.G$Coef > 0 & coefs.G$P.value< 0.05)
(coefs.G$Coef > 0 & coefs.G$P.value< 0.05)
coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.05),]
coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.05),]$Class
try(coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.05),]$Class<-"Up")
try(coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< 0.05),]$Class<-"Down")
coefs.G
extract.coef.genotype<-function(trait) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
# Step 3 Extract coeffecient dataframe and add column for row.names
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G<- data.frame (Trait=paste(trait),Predictor=row.names(coefs.G), coefs.G) # add the row names as column
colnames(coefs.G) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
coefs.G$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< 0.05),]$Class<-"Up")
try(coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< 0.05),]$Class<-"Down")
return(coefs.G)
}
extract.coef.genotype(trait = "total_biomass")
extract.coef.genotype(trait = "ratio")
rbind(
extract.coef.genotype("nodules_perplant"),extract.coef.genotype("average_size"),extract.coef.genotype("total_area"),extract.coef.genotype("total_nodulated_area_perplant"),extract.coef.genotype("total_biomass"),extract.coef.genotype("ratio"),extract.coef.genotype("Nodule_weight_perplant"),extract.coef.genotype("log_CFUpernodule"),extract.coef.genotype("log_CFUperplant"))
Geno.Coef.Summary<-rbind(
extract.coef.genotype("nodules_perplant"),extract.coef.genotype("average_size"),extract.coef.genotype("total_area"),extract.coef.genotype("total_nodulated_area_perplant"),extract.coef.genotype("total_biomass"),extract.coef.genotype("ratio"),extract.coef.genotype("Nodule_weight_perplant"),extract.coef.genotype("log_CFUpernodule"),extract.coef.genotype("log_CFUperplant"))
extract.coef.genotype<-function(trait,p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
# Step 3 Extract coeffecient dataframe and add column for row.names
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G<- data.frame (Trait=paste(trait),Predictor=row.names(coefs.G), coefs.G) # add the row names as column
colnames(coefs.G) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
coefs.G$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< p.threshold),]$Class<-"Up")
try(coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< p.threshold),]$Class<-"Down")
return(coefs.G)
}
extract.coef.genotype(trait = "total_biomass")
extract.coef.genotype(trait = "total_biomass",p.threshold=0.001)
extract.coef.genotype<-function(trait,p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
#  model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
# Step2: Run a lm model with genotypes and replicate as predictors
model.G <- lm(my.data[,trait] ~ type + rep, data = my.data)
# Step 3 Extract coeffecient dataframe and add column for row.names
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G<- data.frame (Trait=paste(trait),Predictor=row.names(coefs.G), coefs.G) # add the row names as column
colnames(coefs.G) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
coefs.G$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< p.threshold),]$Class<-"Up")
try(coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< p.threshold),]$Class<-"Down")
return(coefs.G)
}
extract.coef.genotype(trait = "total_biomass",p.threshold=0.001)
extract.coef.genotype<-function(trait, predictor, p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor="name")  {
extract.coef.genotype<-function(trait, predictor, p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor=="name")  {
model.G <- lm(my.data[,trait] ~ name + rep, data = my.data)
}
if(predictor=="type")  {
model.G <- lm(my.data[,trait] ~ type + rep, data = my.data)
}
# Step 3 Extract coeffecient dataframe and add column for row.names
coefs.G <- as.data.frame(summary(model.G)$coefficients) # covert to data fram
coefs.G<- data.frame (Trait=paste(trait),Predictor=row.names(coefs.G), coefs.G) # add the row names as column
colnames(coefs.G) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
coefs.G <-coefs.G[!coefs.G$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
coefs.G$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(coefs.G[(coefs.G$Coef > 0 & coefs.G$P.value< p.threshold),]$Class<-"Up")
try(coefs.G[(coefs.G$Coef < 0 & coefs.G$P.value< p.threshold),]$Class<-"Down")
return(coefs.G)
}
extract.coef.genotype(trait = "total_biomass",p.threshold=0.001)
extract.coef.genotype(trait = "total_biomass",predictor="name", p.threshold=0.001)
extract.coef.genotype(trait = "total_biomass",predictor="type", p.threshold=0.001)
extract.coef.genotype(trait = "nodules_perplant",predictor="type")
extract.coefs<-function(trait, predictor="name", p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor=="name")  {
my.model <- lm(my.data[,trait] ~ name + rep, data = my.data)
}
if(predictor=="type")  {
my.model<- lm(my.data[,trait] ~ type + rep, data = my.data)
}
# Step 3 Extract coeffecient dataframe and add column for row.names
my.coefs <- as.data.frame(summary(my.model)$coefficients) # covert to data fram
my.coefs <- data.frame (Trait=paste(trait),Predictor=row.names(my.coefs), my.coefs) # add the row names as column
colnames(my.coefs) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
my.coefs <-my.coefs[!my.coefs$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
my.coefs$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(my.coefs[(my.coefs$Coef > 0 & my.coefs$P.value< p.threshold),]$Class<-"Up")
try(my.coefs[(my.coefs$Coef < 0 & my.coefs$P.value< p.threshold),]$Class<-"Down")
return(my.coefs)
}
extract.coef.genotype(trait = "ratio")
rbind(
extract.coefs("nodules_perplant"),extract.coefs("average_size"),extract.coefs("total_area"),extract.coefs("total_nodulated_area_perplant"),extract.coefs("total_biomass"),extract.coefs("ratio"),extract.coefs("Nodule_weight_perplant"),extract.coefs("log_CFUpernodule"),extract.coefs("log_CFUperplant"))
extract.coefs("nodules_perplant",predictor="type")
rbind(
extract.coefs("nodules_perplant",predictor="type"),extract.coefs("average_size",predictor="type"),extract.coefs("total_area",predictor="type"),extract.coefs("total_nodulated_area_perplant",predictor="type"),extract.coefs("total_biomass",predictor="type"),extract.coefs("ratio",predictor="type"),extract.coefs("Nodule_weight_perplant",predictor="type"),extract.coefs("log_CFUpernodule",predictor="type"),extract.coefs("log_CFUperplant",predictor="type"))
extract.coefs("average_size")
trait= "average_size"
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
my.data
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
my.data$names
my.data$name
my.data[my.data$name=="dmi1-2",]
my.data[my.data$name=="dmi2-3",]
data_HostMutants2021_nod_counts
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data$total_area
all.data$total_area==0
alldata[all.data$total_area==0,]$total_area
all.data[all.data$total_area==0,]$total_area
all.data[all.data$total_area==0,]$total_area<- NA
all.data[all.data$total_area==0,]$total_area
all.data$total_area
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data[all.data$total_area==0,]$total_area<- NA
all.data[all.data$average_size==0,]$average_size<- NA
all.data[all.data$Circularity==0,]$Circularity<- NA
all.data[all.data$percent_area==0,]$percent_area<- NA
all.data[all.data$Solidity==0,]$Solidity<- NA
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
extract.coefs<-function(trait, predictor="name", p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor=="name")  {
my.model <- lm(my.data[,trait] ~ name + rep, data = my.data)
}
if(predictor=="type")  {
my.model<- lm(my.data[,trait] ~ type + rep, data = my.data)
}
# Step 3 Extract coeffecient dataframe and add column for row.names
my.coefs <- as.data.frame(summary(my.model)$coefficients) # covert to data fram
my.coefs <- data.frame (Trait=paste(trait),Predictor=row.names(my.coefs), my.coefs) # add the row names as column
colnames(my.coefs) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
my.coefs <-my.coefs[!my.coefs$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
my.coefs$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(my.coefs[(my.coefs$Coef > 0 & my.coefs$P.value< p.threshold),]$Class<-"Up")
try(my.coefs[(my.coefs$Coef < 0 & my.coefs$P.value< p.threshold),]$Class<-"Down")
return(my.coefs)
}
extract.coefs(trait = "average_size")
Geno.Coef.Summary<-rbind(
extract.coefs("nodules_perplant"),extract.coefs("average_size"),extract.coefs("total_area"),extract.coefs("total_nodulated_area_perplant"),extract.coefs("total_biomass"),extract.coefs("ratio"),extract.coefs("Nodule_weight_perplant"),extract.coefs("log_CFUpernodule"),extract.coefs("log_CFUperplant"))
Type.Coef.Summary<-rbind(
extract.coefs("nodules_perplant",predictor="type"),extract.coefs("average_size",predictor="type"),extract.coefs("total_area",predictor="type"),extract.coefs("total_nodulated_area_perplant",predictor="type"),extract.coefs("total_biomass",predictor="type"),extract.coefs("ratio",predictor="type"),extract.coefs("Nodule_weight_perplant",predictor="type"),extract.coefs("log_CFUpernodule",predictor="type"),extract.coefs("log_CFUperplant",predictor="type"))
Type.Coef.Summary
Geno.Coef.Summary
write.table (Geno.Coef.Summary,file="../tables/Geno.Coef.Summary.txt",sep = "\t",row.names = FALSE)
write.table (Type.Coef.Summary,file="../tables/Type.Coef.Summary.txt",sep = "\t",row.names = FALSE)
extract.anova<- function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
ANOVA.Trait.Summary<-rbind(extract.anova("nodules_perplant"),
extract.anova("average_size"),
extract.anova("total_area"),extract.anova("total_nodulated_area_perplant"),extract.anova("total_biomass"),extract.anova("ratio"),extract.anova("Nodule_weight_perplant"),extract.anova("log_CFUpernodule"),extract.anova("log_CFUperplant"))
View(ANOVA.Trait.Summary)
write.table (ANOVA.Trait.Summary,file="../tables/ANOVA-Trait-Summary.txt",sep = "\t",row.names = FALSE)
plot(all.data.A17$Nodule_weight_perplant,all.data.A17$Nodulesizeperplant)
plot(all.data.A17$Nodule_weight_perplant,all.data.A17$total_nodulated_area_perplant)
cor(all.data.A17$Nodule_weight_perplant,all.data.A17$total_nodulated_area_perplant)
cor(all.data.A17$Nodule_weight_perplant,all.data.A17$total_nodulated_area_perplant,use = "pairwise.complete.obs")
View(Geno.Coef.Summary)
plot(all.data.A17$Circularity,all.data.A17$Nodulesizeperplant)
plot(all.data.A17$Circularity,all.data.A17$Solidity)
plot(all.data.A17$Circularity,all.data.A17$CFUpernodule)
plot(all.data.A17$Circularity,all.data.A17$log_CFUpernodule)
plot(all.data.A17$Circularity,all.data.A17$nodules_perplant)
