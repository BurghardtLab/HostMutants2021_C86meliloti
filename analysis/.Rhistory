m_name <- select(filter(meta_fit,background=="R108" & type!="KO/OX"), name)
m_type <- select(filter(meta_fit,background=="R108" & type!="KO/OX"), type)
df1 <- df1 %>% add_column(m_name, m_type)
rda1_ev <-as.vector(eigenvals(rda2, constrained=TRUE))
rda.plot <- ggplot(df1, aes(x=RDA1, y=RDA2)) +
geom_point(aes(color=type, shape=name), size=4)+
scale_shape_manual(values=c(15, 8, 10, 18,17,20,7,16,19))+
scale_color_manual(values=mypal[c(4,6)])+
geom_text(aes(label=name),size=4) +
geom_hline(yintercept=0, linetype="dotted") +
geom_vline(xintercept=0, linetype="dotted") +
coord_fixed() +
labs(x=paste("RDA 1 (",round(rda1_ev[1],2),"%)"),y=paste("RDA 2 (",round(rda1_ev[2],2),"%)")) +
theme_classic() + theme(legend.position="top", text = element_text(size=14))
rda.plot
ggsave("../figures/rda_r108.png", rda.plot, height = 6 , width = 8, dpi=300)
# RDA analysis for fitness and plot RDA1 vs RDA2 and RDA3 vs RDA4
meta_fit_r108 <- meta_fit %>% filter(background=="R108") %>% filter(type!="KO/OX")
# Run a few different RDA Models
rda1<-rda(meta_fit_r108[,c(2:87)]~type,meta_fit_r108, scale=TRUE) # Time only
rda2<-rda(meta_fit_r108[,c(2:87)]~name,meta_fit_r108, scale=TRUE) # Time only
rda3<-rda(meta_fit_r108[,c(2:87)]~type*name,meta_fit_r108, scale=TRUE) # Time only
rda4<-rda(meta_fit_r108[,c(2:87)]~type+name,meta_fit_r108, scale=TRUE) # Time only
# Rsquared gives you an overall idea of well the overall model adjusted for the number of predictors you have
mymodels<-data.frame(data=c("R108"),model=c("genotype"),
Radj=c(RsquareAdj(rda1)$adj.r.squared),
Prop.Exp=c(summary(rda1)$constr.chi/summary(rda1)$tot.chi))
mymodels
# The adjusted r-squared for the model allowing for an interaction between Time and Treatment has the highest rsquared even when penalized for the additional predictors
# Run a permutational significance test for the explanatory variables in the full model
# In this case the inference from the anova aligns with the inference from the adjusted R squared
rda.model.all<-anova(rda1, step=1000, perm.max=1000, by= "terms") # The interaction is significant, but temperature has the largest effect
write.table(rda.model.all,file = "../tables/RDA_r108_type.tsv",sep="\t",col.names = NA,row.names=TRUE)
#Plot the FULL model with the interaction #
smry <- summary(rda2)
df1  <- data.frame(smry$sites[,1:2])       # PC1 and PC2
#df2  <- data.frame(smry$species[,1:2])     # loadings for PC1 and PC2
#copy sample_id(substring(right, 4)) in to a new column called sample_id
m_name <- select(filter(meta_fit,background=="R108" & type!="KO/OX"), name)
m_type <- select(filter(meta_fit,background=="R108" & type!="KO/OX"), type)
df1 <- df1 %>% add_column(m_name, m_type)
rda1_ev <-as.vector(eigenvals(rda2, constrained=TRUE))
rda.plot <- ggplot(df1, aes(x=RDA1, y=RDA2)) +
geom_point(aes(color=type, shape=name), size=4)+
scale_shape_manual(values=c(15, 8, 10, 7,17,20,18,16,19))+
scale_color_manual(values=mypal[c(4,6)])+
geom_text(aes(label=name),size=4) +
geom_hline(yintercept=0, linetype="dotted") +
geom_vline(xintercept=0, linetype="dotted") +
coord_fixed() +
labs(x=paste("RDA 1 (",round(rda1_ev[1],2),"%)"),y=paste("RDA 2 (",round(rda1_ev[2],2),"%)")) +
theme_classic() + theme(legend.position="top", text = element_text(size=14))
rda.plot
ggsave("../figures/rda_r108.png", rda.plot, height = 6 , width = 8, dpi=300)
# RDA analysis for fitness and plot RDA1 vs RDA2 and RDA3 vs RDA4
meta_fit_r108 <- meta_fit %>% filter(background=="R108") %>% filter(type!="KO/OX")
# Run a few different RDA Models
rda1<-rda(meta_fit_r108[,c(2:87)]~type,meta_fit_r108, scale=TRUE) # Time only
rda2<-rda(meta_fit_r108[,c(2:87)]~name,meta_fit_r108, scale=TRUE) # Time only
rda3<-rda(meta_fit_r108[,c(2:87)]~type*name,meta_fit_r108, scale=TRUE) # Time only
rda4<-rda(meta_fit_r108[,c(2:87)]~type+name,meta_fit_r108, scale=TRUE) # Time only
# Rsquared gives you an overall idea of well the overall model adjusted for the number of predictors you have
mymodels<-data.frame(data=c("R108"),model=c("genotype"),
Radj=c(RsquareAdj(rda1)$adj.r.squared),
Prop.Exp=c(summary(rda1)$constr.chi/summary(rda1)$tot.chi))
mymodels
# The adjusted r-squared for the model allowing for an interaction between Time and Treatment has the highest rsquared even when penalized for the additional predictors
# Run a permutational significance test for the explanatory variables in the full model
# In this case the inference from the anova aligns with the inference from the adjusted R squared
rda.model.all<-anova(rda1, step=1000, perm.max=1000, by= "terms") # The interaction is significant, but temperature has the largest effect
write.table(rda.model.all,file = "../tables/RDA_r108_type.tsv",sep="\t",col.names = NA,row.names=TRUE)
#Plot the FULL model with the interaction #
smry <- summary(rda2)
df1  <- data.frame(smry$sites[,1:2])       # PC1 and PC2
#df2  <- data.frame(smry$species[,1:2])     # loadings for PC1 and PC2
#copy sample_id(substring(right, 4)) in to a new column called sample_id
m_name <- select(filter(meta_fit,background=="R108" & type!="KO/OX"), name)
m_type <- select(filter(meta_fit,background=="R108" & type!="KO/OX"), type)
df1 <- df1 %>% add_column(m_name, m_type)
rda1_ev <-as.vector(eigenvals(rda2, constrained=TRUE))
rda.plot <- ggplot(df1, aes(x=RDA1, y=RDA2)) +
geom_point(aes(color=type, shape=name), size=4)+
scale_shape_manual(values=c(15, 8, 10, 7,17,20,18,16,19))+
scale_color_manual(values=mypal[c(4,6)])+
geom_text(aes(label=name),size=4) +
geom_hline(yintercept=0, linetype="dotted") +
geom_vline(xintercept=0, linetype="dotted") +
coord_fixed() +
labs(x=paste("RDA 1 (",round(rda1_ev[1],2),"%)"),y=paste("RDA 2 (",round(rda1_ev[2],2),"%)")) +
theme_classic() + theme(legend.position="top", text = element_text(size=14))
rda.plot
ggsave("../figures/rda_r108.png", rda.plot, height = 6 , width = 10, dpi=300)
#By host genotype
p_shoot_root <-ggplot(all_data, aes(x=reorder(name,order), y=shoot_root, fill=type)) +
labs(x="Plant Host",y="Shoot:Root") +
geom_boxplot() +
geom_point() +
coord_flip() +
scale_color_manual(values=cbPalette) +
theme_classic() + theme(legend.position="top", text = element_text(size=22))
p_shoot_root
p_bg_shoot_root<-ggplot(all_data, aes(x=background, y=shoot_root)) +
geom_boxplot(aes(x=background, y=shoot_root)) +
geom_jitter(aes(x=background, y=shoot_root, color=type)) +
scale_color_manual(values=cbPalette) +
scale_fill_manual(values=c("#D55E00", "#CC79A7")) +
labs(x="Plant Host",y="Shoot:Root")+
theme_classic() + theme(legend.position="", text = element_text(size=18))
p_bg_shoot_root
ggsave(plot = p_shoot_root , width = 8, height = 9, dpi = 600, filename = "../figures/shoot_root.png")
res.aov <- aov(shoot_root ~ background, data = all_data) #filter(all_data, background=="A17"))
summary(res.aov)
res.aov <- aov(shoot_root ~ type, data = filter(all_data, background=="A17"))
summary(res.aov)
TukeyHSD(res.aov)
res.aov <- aov(shoot_root ~ type, data = filter(all_data, background=="R108"))
summary(res.aov)
mymodels
mymodels<-data.frame(data=c("R108"),model=c("genotype"),
Radj=c(RsquareAdj(rda2)$adj.r.squared),
Prop.Exp=c(summary(rda2)$constr.chi/summary(rda2)$tot.chi))
mymodels
smry
mymodels
fit.mean
fit.mean <- column_to_rownames(fit.mean, "name")
fit.mean <- fit.mean[,-87]
l = length(seq(-7.9, 4, 0.1))
pal = colorRampPalette(c('#2166AC', '#F7F7F7', '#B2182B'))(l)
#pal = as.vector(c("#2166AC", "#F7F7F7", "#B2182B"))
pdf(file="../figures/heatbase_mean.pdf",width = 8,height=8)
h <- heatmap(as.matrix(fit.mean),col=pal,cexCol = .5,cexRow = .75)
h <- heatmap(as.matrix(fit.med),col=pal,cexCol = .5,cexRow = .75)
dev.off()
dev.off()
#HEAT MAP
####NEED TO MAKE THIS MEANS
#Calculate median fitness and plot PCA
#Take Median of fitness
fit.med <- meta_fit_a17_dnf %>% group_by(name) %>% summarise_if(is.numeric,median)
fit.mean <- meta_fit_a17_dnf %>% group_by(name) %>% summarise_if(is.numeric,mean)
df_long <- pivot_longer(fit.med[,1:87],"MAG5":"MAG761A", names_to="Mag", values_to="value")
p<- ggplot(df_long, aes(x = name, y = Mag, fill = value)) +
geom_tile(color = "black") +
scale_fill_viridis_b()
p
ggsave(plot = p , width = 12, height = 12, dpi = 600, filename = "../figures/heat_a17_dnf.png")
fit.med <- column_to_rownames(fit.med, "name")
fit.med <- fit.med[,-87]
#l = length(seq(-7.9, 5, 0.1))
pal = as.vector(c("#2166AC", "#F7F7F7", "#B2182B"))
pdf(file="../figures/heatbase.pdf")
h <- heatmap(t(fit.med))
dev.off()
library(RColorBrewer)
fit.mean <- column_to_rownames(fit.mean, "name")
fit.mean <- fit.mean[,-87]
l = length(seq(-7.9, 4, 0.1))
pal = colorRampPalette(c('#2166AC', '#F7F7F7', '#B2182B'))(l)
#pal = as.vector(c("#2166AC", "#F7F7F7", "#B2182B"))
pdf(file="../figures/heatbase_mean.pdf",width = 8,height=8)
h <- heatmap(as.matrix(fit.mean),col=pal,cexCol = .5,cexRow = .75)
h <- heatmap(as.matrix(fit.med),col=pal,cexCol = .5,cexRow = .75)
dev.off()
View(freq_div)
View(freq)
diversity(freq[,c(-1,-89:-93)])
freq[,c(-1,-89:-93)]
freq[,c(-1,-88:-93)]
diversity(freq[,c(-1,-88:-93)])
cbind(diversity(freq[,c(-1,-88:-93)]),freq[,88])
cbind(diversity(freq[,c(-1,-88:-93)]),freq[,80])
cbind(diversity(freq[,c(-1,-88:-93)]),freq[,90])
meta_fit %>% group_by(name) %>% summarise_if(is.numeric,mean)
fit.mean.all <- column_to_rownames(fit.mean.all, "name")
fit.mean.all <- meta_fit %>% group_by(name) %>% summarise_if(is.numeric,mean)
fit.mean.all <- column_to_rownames(fit.mean.all, "name")
fit.mean.all <- fit.mean.all[,-87]
l = length(seq(-7.9, 8, 0.1))
pal = colorRampPalette(c('#2166AC', '#F7F7F7', '#B2182B'))(l)
pdf(file="../figures/heatbase_mean_all.pdf",width = 8,height=8)
h <- heatmap(as.matrix(fit.mean.all),col=pal,cexCol = .5,cexRow = .75)
dev.off()
#
knitr::opts_chunk$set(echo = TRUE)
#Set up all the packages you will need. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
knitr::opts_chunk$set(message = FALSE)
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.numeric(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.numeric(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
# running the linear model
model <- lm(Count ~ genotype_id + rep + type, data = all.data.A17)
all.data.A17$name
#
knitr::opts_chunk$set(echo = TRUE)
#Set up all the packages you will need. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.integer(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
#Select for only the A17 background
all.data.A17 <- all.data %>% filter(background=="A17")
# Remove two genotypes that did not survive/form nodules... Use the '!=' this time which says to grab all of the them BUT the named genotype ID.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.integer(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
#Select for only the A17 background
all.data.A17 <- all.data %>% filter(background=="A17")
# Remove two genotypes that did not survive/form nodules... Use the '!=' this time which says to grab all of the them BUT the named genotype ID.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
# running the linear model
model <- lm(Count ~ genotype_id + rep + type, data = all.data.A17)
summary(model)
all.data.A17$name
#Note that this currently is a character. We need to turn it into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#We need to do the same thing with type
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
# Now run the model
model1 <- lm(Count ~ name + rep + type, data = all.data.A17)
summary(model)
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
#Examine the summary
summary(model.name)
#Examine the Analysis of Variance table
anova(model.name)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
anova(model.type)
#Super quick base r plot!
plot(Count~name, data=all.data.A17)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.integer(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
#Select for only the A17 background
all.data.A17 <- all.data %>% filter(background=="A17")
# Remove two genotypes that did not survive/form nodules... Use the '!=' this time which says to grab all of the them BUT the named genotype ID.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
anova(model.type)
#Super quick base r plot!
plot(Count~type, data=all.data.A17)
all.data.A17$name
#Note that this currently is a character. We need to turn it into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#We need to do the same thing with type
all.data.A17$type<-factor(all.data.A17$type, levels = c("AON","Early","Late","WT"))
# Now run the model
model1 <- lm(Count ~ name + rep + type, data = all.data.A17)
summary(model)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
anova(model.type)
View(all.data.A17)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
anova(model.type)
#Super quick base r plot!
plot(Count~type, data=all.data.A17)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
anova(model.type)
#
knitr::opts_chunk$set(echo = TRUE)
#Set up all the packages you will need. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
knitr::opts_chunk$set(message = FALSE)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#
knitr::opts_chunk$set(echo = TRUE)
#Set up all the packages you will need. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.integer(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
#Select for only the A17 background
all.data.A17 <- all.data %>% filter(background=="A17")
# Remove two genotypes that did not survive/form nodules... Use the '!=' this time which says to grab all of the them BUT the named genotype ID.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
# running the linear model
model <- lm(Count ~ genotype_id + rep + type, data = all.data.A17)
summary(model)
all.data.A17$name
#Note that this currently is a character. We need to turn it into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#We need to do the same thing with type
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
# Now run the model
model1 <- lm(Count ~ name + rep + type, data = all.data.A17)
summary(model)
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
#Examine the summary
summary(model.name)
#Examine the Analysis of Variance table
anova(model.name)
#Super quick base r plot!
plot(Count~name, data=all.data.A17)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
anova(model.type)
#
knitr::opts_chunk$set(echo = TRUE)
#Set up all the packages you will need. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
knitr::opts_chunk$set(message = FALSE)
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
#
knitr::opts_chunk$set(echo = TRUE)
#Set up all the packages you will need. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.integer(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
#Select for only the A17 background
all.data.A17 <- all.data %>% filter(background=="A17")
# Remove two genotypes that did not survive/form nodules... Use the '!=' this time which says to grab all of the them BUT the named genotype ID.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
all.data.A17$name
#Note that this currently is a character. We need to turn it into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#We need to do the same thing with type
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
# Now run the model
model1 <- lm(Count ~ name + rep + type, data = all.data.A17)
summary(model)
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
#Examine the summary
summary(model.name)
#Examine the Analysis of Variance table
anova(model.name)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
anova(model.type)
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
p<-anova(model.type)
p
# percentage of variance explained
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
p<-anova(model.type)
p
# percentage of variance explained
p<-p$"Sum Sq"
print(cbind(p,PctExp=p/sum(p)*100))
# Run a model with type and replicate as predictors
model.type <- lm(Count ~ type + rep, data = all.data.A17)
#Examine the summary
summary(model.type)
#Examine the Analysis of Variance table
p<-anova(model.type)
p
# percentage of variance explained
p<-p$"Sum Sq"
print(cbind(PctExp=p/sum(p)*100))
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
#Examine the summary
summary(model.name)
#Examine the Analysis of Variance table
q<-anova(model.name)
q
# percentage of variance explained
q<-q$"Sum Sq"
print(cbind(PctExp=q/sum(p)*100))
all.data.A17$name
#Note that this currently is a character. We need to turn it into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#We need to do the same thing with type
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
# Now run the model
model1 <- lm(Count ~ name + rep + type, data = all.data.A17)
summary(model1)
#
knitr::opts_chunk$set(echo = TRUE)
#Set up all the packages you will need. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
genotype_name$genotype_id = as.integer(genotype_name$genotype_id)
#merge the two data set by 'genotype_id'
all.data<- full_join (data_HostMutants2021_nod_counts, genotype_name, by = "genotype_id")
#Select for only the A17 background
all.data.A17 <- all.data %>% filter(background=="A17")
# Remove two genotypes that did not survive/form nodules... Use the '!=' this time which says to grab all of the them BUT the named genotype ID.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
# running the linear model
model <- lm(Count ~ genotype_id + rep + type, data = all.data.A17)
summary(model)
all.data.A17$name
#Note that this currently is a character. We need to turn it into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#We need to do the same thing with type
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
# Now run the model
model1 <- lm(Count ~ name + rep + type, data = all.data.A17)
summary(model1)
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
#Examine the summary
summary(model.name)
#Examine the Analysis of Variance table
q<-anova(model.name)
q
# percentage of variance explained
q<-q$"Sum Sq"
print(cbind(PctExp=q/sum(p)*100))
# Run a model with name and replicate as predictors
model.name <- lm(Count ~ name + rep, data = all.data.A17)
#Examine the summary
summary(model.name)
#Examine the Analysis of Variance table
q<-anova(model.name)
q
# percentage of variance explained
q<-q$"Sum Sq"
print(cbind(PctExp=q/sum(q)*100))
