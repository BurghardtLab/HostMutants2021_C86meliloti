all.data[all.data$Solidity==0,]$Solidity<- NA
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
#changing the col names
oldnames = c("Nodule_number_per_plant","Total_nodule_area_per_plant","Average_area_per_nodule","Root_to_Shoot_Ratio","Total_biomass_per_plant","CFU_per_nodule_LOG10","CFU_per_plant_LOG10")
newnames = c("nodule number per plant","total nodulated area per plant","average area per nodule","root to shoot ratio per plant","total biomass per plant","log10(CFUpernodule)","log10(CFUperplant)")
for(i in 1:7) names(all.data)[names(all.data) == oldnames[i]] = newnames[i]
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
### REDUCE data set down to traits and columns of interest for this paper
### Make sure factors are in the right order for analysis
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
#for troubleshooting
#trait= "nodules_perplant"
#trait= "total_biomass"
#trait= "average_size"
extract.coefs<-function(trait, predictor="name", p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor=="name")  {
my.model <- lm(my.data[,trait] ~ name + rep, data = my.data)
}
if(predictor=="type")  {
my.model<- lm(my.data[,trait] ~ type + rep, data = my.data)
}
# Step 3 Extract coeffecient dataframe and add column for row.names
my.coefs <- as.data.frame(summary(my.model)$coefficients) # covert to data fram
my.coefs <- data.frame (Trait=paste(trait),Predictor=row.names(my.coefs), my.coefs) # add the row names as column
colnames(my.coefs) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
my.coefs <-my.coefs[!my.coefs$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
my.coefs$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(my.coefs[(my.coefs$Coef > 0 & my.coefs$P.value< p.threshold),]$Class<-"Up")
try(my.coefs[(my.coefs$Coef < 0 & my.coefs$P.value< p.threshold),]$Class<-"Down")
return(my.coefs)
}
Geno.Coef.Summary<-rbind(extract.coefs("Nodule_number_per_plant"),extract.coefs("Average_area_per_nodule"),extract.coefs("Total_nodule_area_per_plant"),extract.coefs("Total_biomass_per_plant"),extract.coefs("Root_to_Shoot_Ratio"),extract.coefs("CFU_per_nodule_LOG10"),extract.coefs("CFU_per_plant_LOG10"))
#for troubleshooting
#trait= "nodules_perplant"
#trait= "total_biomass"
#trait= "average_size"
extract.coefs<-function(trait, predictor="name", p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor=="name")  {
my.model <- lm(my.data[,trait] ~ name + rep, data = my.data)
}
if(predictor=="type")  {
my.model<- lm(my.data[,trait] ~ type + rep, data = my.data)
}
# Step 3 Extract coeffecient dataframe and add column for row.names
my.coefs <- as.data.frame(summary(my.model)$coefficients) # covert to data fram
my.coefs <- data.frame (Trait=paste(trait),Predictor=row.names(my.coefs), my.coefs) # add the row names as column
colnames(my.coefs) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
my.coefs <-my.coefs[!my.coefs$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
my.coefs$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(my.coefs[(my.coefs$Coef > 0 & my.coefs$P.value< p.threshold),]$Class<-"Up")
try(my.coefs[(my.coefs$Coef < 0 & my.coefs$P.value< p.threshold),]$Class<-"Down")
return(my.coefs)
}
Geno.Coef.Summary<-rbind(extract.coefs("nodule number per plant"),extract.coefs("total nodulated area per plant"),extract.coefs("average area per nodule"),extract.coefs("total biomass per plant"),extract.coefs("root to shoot ratio per plant"),extract.coefs("log10(CFUpernodule)"),extract.coefs("log10(CFUperplant)"))
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data[all.data$total_area==0,]$total_area<- NA
all.data[all.data$average_size==0,]$average_size<- NA
all.data[all.data$Circularity==0,]$Circularity<- NA
all.data[all.data$percent_area==0,]$percent_area<- NA
all.data[all.data$Solidity==0,]$Solidity<- NA
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
#changing the col names
oldnames = c("Nodule_number_per_plant","Total_nodule_area_per_plant","Average_area_per_nodule","Root_to_Shoot_Ratio","Total_biomass_per_plant","CFU_per_nodule_LOG10","CFU_per_plant_LOG10")
newnames = c("nodule number per plant","total nodulated area per plant","average area per nodule","root to shoot ratio per plant","total biomass per plant","log10(CFUpernodule)","log10(CFUperplant)")
for(i in 1:7) names(all.data)[names(all.data) == oldnames[i]] = newnames[i]
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data[all.data$total_area==0,]$total_area<- NA
all.data[all.data$average_size==0,]$average_size<- NA
all.data[all.data$Circularity==0,]$Circularity<- NA
all.data[all.data$percent_area==0,]$percent_area<- NA
all.data[all.data$Solidity==0,]$Solidity<- NA
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
#changing the col names
oldnames = c("nodules_perplant","total_nodulated_area_perplant","Nodulesizeperplant","ratio","total_biomass","log_CFUpernodule","log_CFUperplant")
newnames = c("Nodule_number_per_plant","Total_nodule_area_per_plant","Average_area_per_nodule","Root_to_Shoot_Ratio","Total_biomass_per_plant","CFU_per_nodule_LOG10","CFU_per_plant_LOG10")
for(i in 1:7) names(all.data)[names(all.data) == oldnames[i]] = newnames[i]
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
### REDUCE data set down to traits and columns of interest for this paper
### Make sure factors are in the right order for analysis
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
extract.anova<- function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
#Compile Anovas results across Phenotypes
ANOVA.Trait.Summary<-rbind(extract.anova("Nodule_number_per_plant"),extract.anova("Average_area_per_nodule"),extract.anova("Total_nodule_area_per_plant"),extract.anova("Total_biomass_per_plant"),extract.anova("Root_to_Shoot_Ratio"),extract.anova("CFU_per_nodule_LOG10"),extract.anova("CFU_per_plant_LOG10"))
write.table (ANOVA.Trait.Summary,file="../tables/ANOVA-Trait-Summary.txt",sep = "\t",row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data[all.data$total_area==0,]$total_area<- NA
all.data[all.data$average_size==0,]$average_size<- NA
all.data[all.data$Circularity==0,]$Circularity<- NA
all.data[all.data$percent_area==0,]$percent_area<- NA
all.data[all.data$Solidity==0,]$Solidity<- NA
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
#changing the col names
oldnames = c("nodules_perplant","total_nodulated_area_perplant","Nodulesizeperplant","ratio","total_biomass","log_CFUpernodule","log_CFUperplant")
newnames = c("nodule_number_per_plant","total_nodule_area_per_plant","average_area_per_nodule","root_to_shoot_Ratio","total_biomass_per_plant","cfu_per_nodule_LOG10","cfu_per_plant_LOG10")
for(i in 1:7) names(all.data)[names(all.data) == oldnames[i]] = newnames[i]
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
### REDUCE data set down to traits and columns of interest for this paper
### Make sure factors are in the right order for analysis
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
#for troubleshooting
#trait= "nodules_perplant"
#trait= "total_biomass"
#trait= "average_size"
extract.coefs<-function(trait, predictor="name", p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor=="name")  {
my.model <- lm(my.data[,trait] ~ name + rep, data = my.data)
}
if(predictor=="type")  {
my.model<- lm(my.data[,trait] ~ type + rep, data = my.data)
}
# Step 3 Extract coeffecient dataframe and add column for row.names
my.coefs <- as.data.frame(summary(my.model)$coefficients) # covert to data fram
my.coefs <- data.frame (Trait=paste(trait),Predictor=row.names(my.coefs), my.coefs) # add the row names as column
colnames(my.coefs) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
my.coefs <-my.coefs[!my.coefs$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
my.coefs$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(my.coefs[(my.coefs$Coef > 0 & my.coefs$P.value< p.threshold),]$Class<-"Up")
try(my.coefs[(my.coefs$Coef < 0 & my.coefs$P.value< p.threshold),]$Class<-"Down")
return(my.coefs)
}
Geno.Coef.Summary<-rbind(extract.coefs("nodule_number_per_plant"),extract.coefs("average_area_per_nodule"),extract.coefs("total_nodule_area_per_plant"),extract.coefs("total_biomass_per_plant"),extract.coefs("root_to_shoot_ratio"),extract.coefs("cfu_per_nodule_LOG10"),extract.coefs("cfu_per_plant_LOG10"))
extract.anova<- function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
#Compile Anovas results across Phenotypes
ANOVA.Trait.Summary<-rbind(extract.anova("Nodule_number_per_plant"),extract.anova("Average_area_per_nodule"),extract.anova("Total_nodule_area_per_plant"),extract.anova("Total_biomass_per_plant"),extract.anova("Root_to_Shoot_Ratio"),extract.anova("CFU_per_nodule_LOG10"),extract.anova("CFU_per_plant_LOG10"))
extract.anova<- function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
#Compile Anovas results across Phenotypes
ANOVA.Trait.Summary<-rbind(extract.anova("nodule_number_per_plant"),extract.anova("average_area_per_nodule"),extract.anova("total_nodule_area_per_plant"),extract.anova("total_biomass_per_plant"),extract.anova("root_to_shoot_ratio"),extract.anova("cfu_per_nodule_LOG10"),extract.anova("cfu_per_plant_LOG10"))
knitr::opts_chunk$set(echo = TRUE)
#Load packages needed. Tidyverse include dplyer
require(tidyverse)
require(ggpubr)
require(ggplot2)
require(RColorBrewer)
knitr::opts_chunk$set(message = FALSE)
# Import the text file of nodule data
data_HostMutants2021_nod_counts <- read.table("../data/data_HostMutants2021_nod_counts.txt",sep = "\t",header=TRUE)
# Import the genotype information data
genotype_name <- read.table("../data/genotype_name.txt",sep = "\t",header=TRUE)
#removing rows marked "853","838","888","889","890"
genotype_name<-subset(genotype_name,genotype_id!="853")
genotype_name<-subset(genotype_name,genotype_id!="838")
genotype_name<-subset(genotype_name,genotype_id!="888")
genotype_name<-subset(genotype_name,genotype_id!="889")
genotype_name<-subset(genotype_name,genotype_id!="890")
#import the text file with the CFU data
data_nsfpgrp_hostmutants_C86meliloti <- read.table("../data/data_nsfpgrp_hostmutants_C86meliloti.txt",sep = "\t",header=TRUE)
#merge  data_HostMutants2021_nod_counts.txt,data_nsfpgrp_hostmutants_C86meliloti.txt, by 'sample_id","genotype_id" and "rep"
all.data <-full_join (data_HostMutants2021_nod_counts,data_nsfpgrp_hostmutants_C86meliloti,by=c("sample_id","genotype_id","rep"))
# merge the newly created table with the "genotype_name"
all.data <-full_join (all.data,genotype_name,by = "genotype_id")
#removing columns marked "batch","start","end","num_alive_apr15"
all.data<-subset (all.data, select=-c(X,batch,start,end,num_alive_apr15))
#adding above_biomass_g/plant,below_biomass_g/plant,ratio and total_biomass
all.data<-all.data%>% mutate(above_biomass_perplant=above_biomass_g/num_plants,below_biomass_perplant=below_biomass_g/num_plants,ratio=below_biomass_perplant/above_biomass_perplant,total_biomass=above_biomass_perplant+below_biomass_perplant)
#adding nodules/plant
all.data<-all.data%>% mutate(nodules_perplant=Count/num_plants_picked_nods)
#adding cfu per plant - divide by 4ml (this is the amount added to nodules to homogenize) then divide by number of plants picked nodules from to get cfu/ml to cfu/plant;cfupernodule
table(is.na(all.data$cfu_ml)) # 27 NA's (why are you counting the number of NAs in the cfu_ml col? )
table(all.data$cfu_ml==0) # No Zeros.
#There are two reasons it could be a zero either there were no nodules picked and thus no rhizobia or there was a problem with the estimation of cfu. In the first case the 0 is meaningful but from an analysis standpoint we probably still want to ommit them becuase the model won't behave well.
all.data[all.data$total_area==0,]$total_area<- NA
all.data[all.data$average_size==0,]$average_size<- NA
all.data[all.data$Circularity==0,]$Circularity<- NA
all.data[all.data$percent_area==0,]$percent_area<- NA
all.data[all.data$Solidity==0,]$Solidity<- NA
all.data<-all.data%>% mutate(CFUperplant=cfu_ml/num_plants_picked_nods/4, CFUpernodule=CFUperplant/nodules_perplant)
#converting CFUperplant and CFUpernodule to log(CFUperplant),log(CFUpernodule)
all.data<-all.data%>% mutate(log_CFUperplant=log10(CFUperplant),log_CFUpernodule=log10(CFUpernodule))
#adding total_nodulated area_perplant and Nodulesize_perplant
all.data<-all.data%>% mutate(total_nodulated_area_perplant=total_area/num_plants_picked_nods,Nodulesizeperplant=total_nodulated_area_perplant/nodules_perplant)
#adding weight pernodule and totalnodule weight per plant
all.data<-all.data%>% mutate(Nodule_weight_perplant=nodule_weight_g/num_plants_picked_nods,Weight_pernodule=Nodule_weight_perplant/nodules_perplant)
#replacing  'inf' with 'NA'(the sample 846A needs to be removed)
all.data[is.na(all.data) | all.data == "Inf"] <- NA
#changing the col names
oldnames = c("nodules_perplant","total_nodulated_area_perplant","Nodulesizeperplant","ratio","total_biomass","log_CFUpernodule","log_CFUperplant")
newnames = c("nodule_number_per_plant","total_nodule_area_per_plant","average_area_per_nodule","root_to_shoot_ratio","total_biomass_per_plant","cfu_per_nodule_LOG10","cfu_per_plant_LOG10")
for(i in 1:7) names(all.data)[names(all.data) == oldnames[i]] = newnames[i]
write.table (all.data,file="../data/Traits_MedicagoMutants.txt",sep = "\t",row.names = FALSE)
# Importing the data
Traits_MedicagoMutants<- read.table("../data/Traits_MedicagoMutants.txt",sep = "\t",header=TRUE)
#convert the genotype_id into integer
Traits_MedicagoMutants$genotype_id = as.integer(Traits_MedicagoMutants$genotype_id)
#Select for only the A17 background
all.data.A17 <- Traits_MedicagoMutants %>% filter(background=="A17")
# Removing two genotypes that did not survive/form nodules.
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="853")
all.data.A17 <- all.data.A17 %>% filter(genotype_id!="838")
#remove 847F
all.data.A17<-all.data.A17%>%filter(sample_id!= "847F")
#remove 833A
all.data.A17<-all.data.A17%>%filter(sample_id!= "833A")
# Remove 833B
all.data.A17<-all.data.A17%>%filter(sample_id!="833B")
### REDUCE data set down to traits and columns of interest for this paper
### Make sure factors are in the right order for analysis
#Turning all.data.A17$name  into a factor.
all.data.A17$name<-factor(all.data.A17$name)
#Turning all.data.A17$Type into a factor.
all.data.A17$type<-factor(all.data.A17$type, levels = c("WT","Early","Late","AON"))
#Changing the order of the genotypes
all.data.A17$name<-factor(all.data.A17$name,levels=c("A17", "dmi1-2","dmi2-3","dmi3-1","hcl","ipd3","latd", "nad1", "dnf1", "dnf2","dnf3", "dnf4","dnf6","dnf7", "dnf1/dnf2", "dnf5/dnf2", "rdn1", "sunn1","sunn4"))
#for troubleshooting
#trait= "nodules_perplant"
#trait= "total_biomass"
#trait= "average_size"
extract.coefs<-function(trait, predictor="name", p.threshold=0.05) {
# Step1: Remove rows with NA for the focal trait
my.data<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Step2: Run a lm model with genotypes and replicate as predictors
if(predictor=="name")  {
my.model <- lm(my.data[,trait] ~ name + rep, data = my.data)
}
if(predictor=="type")  {
my.model<- lm(my.data[,trait] ~ type + rep, data = my.data)
}
# Step 3 Extract coeffecient dataframe and add column for row.names
my.coefs <- as.data.frame(summary(my.model)$coefficients) # covert to data fram
my.coefs <- data.frame (Trait=paste(trait),Predictor=row.names(my.coefs), my.coefs) # add the row names as column
colnames(my.coefs) <-c("Trait","Predictor","Coef", "St.error","t.value","P.value")# Create more meaningful column names
# Step 4 Remove none genotype predictors
my.coefs <-my.coefs[!my.coefs$Predictor %in% c("(Intercept)","repB","repC","repD","repE","repF"),]
# Step 5: classify coeffecients
my.coefs$Class<-"none" #Set up dummy column to hold classifications
# Step 6 Modify catagorizations based on coef and pvalue.
try(my.coefs[(my.coefs$Coef > 0 & my.coefs$P.value< p.threshold),]$Class<-"Up")
try(my.coefs[(my.coefs$Coef < 0 & my.coefs$P.value< p.threshold),]$Class<-"Down")
return(my.coefs)
}
Geno.Coef.Summary<-rbind(extract.coefs("nodule_number_per_plant"),extract.coefs("average_area_per_nodule"),extract.coefs("total_nodule_area_per_plant"),extract.coefs("total_biomass_per_plant"),extract.coefs("root_to_shoot_ratio"),extract.coefs("cfu_per_nodule_LOG10"),extract.coefs("cfu_per_plant_LOG10"))
write.table (Geno.Coef.Summary,file="../tables/Geno.Coef.Summary.txt",sep = "\t",row.names = FALSE)
Type.Coef.Summary<-rbind(extract.coefs("nodule_number_per_plant",predictor="type"),extract.coefs("average_area_per_nodule",predictor="type"),extract.coefs("total_nodule_area_per_plant",predictor="type"),extract.coefs("total_biomass_per_plant",predictor="type"),extract.coefs("root_to_shoot_ratio",predictor="type"),extract.coefs("cfu_per_nodule_LOG10",predictor="type"),extract.coefs("cfu_per_plant_LOG10",predictor="type"))
write.table (Type.Coef.Summary,file="../tables/Type.Coef.Summary.txt",sep = "\t",row.names = FALSE)
extract.anova<- function(trait) {
#Dropping rows with NA
#all.data.A17 <- all.data.A17 [complete.cases(all.data.A17), ] # This needs to be made specific to the trait! See below
all.data.A17<-all.data.A17[!is.na(all.data.A17[,trait]),]
# Run a model with name and replicate as predictors
NodNum.G <- lm(all.data.A17[,trait] ~ name + rep, data = all.data.A17)
# Run a model with type and replicate as predictors (why the ,?)
NodNum.T<-lm(all.data.A17[,trait] ~ type + rep, data = all.data.A17)
#Examine the Analysis of Variance tables and save output
a.G<-anova(NodNum.G)
a.T<-anova(NodNum.T)
#Compile results into a dataframe
myresults<-data.frame(Response=c(paste(trait)),Predictor=c("Genotype","Replicate","Residual","Type","Replicate","Residual"),Sum.Sq=c(a.G$"Sum Sq",a.T$"Sum Sq"),PctExp=c(a.G$"Sum Sq"/sum(a.G$"Sum Sq")*100,a.T$"Sum Sq"/sum(a.T$"Sum Sq")*100),Df=c(a.G$"Df",a.T$"Df"),Fval=c(a.G$"F value",a.T$"F value"), Pval=c(a.G$"Pr(>F)",a.T$"Pr(>F)"),R.adj=c(summary(NodNum.G)$adj.r.squared,"NA","NA",summary(NodNum.T)$adj.r.squared,"NA","NA"))
return(myresults)
}
#Compile Anovas results across Phenotypes
ANOVA.Trait.Summary<-rbind(extract.anova("nodule_number_per_plant"),extract.anova("average_area_per_nodule"),extract.anova("total_nodule_area_per_plant"),extract.anova("total_biomass_per_plant"),extract.anova("root_to_shoot_ratio"),extract.anova("cfu_per_nodule_LOG10"),extract.anova("cfu_per_plant_LOG10"))
write.table (ANOVA.Trait.Summary,file="../tables/ANOVA-Trait-Summary.txt",sep = "\t",row.names = FALSE)
Geno.Coef.Summary$Class<-factor(Geno.Coef.Summary$Class,levels=c("Up","none","Down"))
Geno.Coef.Summary$Trait<-factor(Geno.Coef.Summary$Trait,levels=c("nodule_number_per_plant","average_area_per_nodule","total_nodule_area_per_plant","total_biomass_per_plant","root_to_shoot_ratio", "cfu_per_nodule_LOG10","cfu_per_plant_LOG10"))
### First pass graph
Coef.Prop.Figure<-ggplot(data = Geno.Coef.Summary) +
geom_bar(mapping = aes(x = Trait, fill = Class), position = "fill")+
theme_bw()+
coord_flip()+
scale_fill_manual(values=c("darkblue","darkgrey","darkred"))+xlab ("")+ylab("Proportion of Genotypes")
Coef.Prop.Figure
pdf(file = "../figures/Figure2_ProportionCoef.pdf",width = 6, height = 6)
Coef.Prop.Figure
dev.off()
